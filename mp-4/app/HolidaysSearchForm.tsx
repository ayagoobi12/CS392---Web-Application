'use client';

import { useState } from 'react';

//Hard coded generated by GPT to create a drop down form list here 
const countries = [
  { code: 'US', name: 'United States' },
  { code: 'CA', name: 'Canada' },
  { code: 'GB', name: 'United Kingdom' },
  { code: 'DE', name: 'Germany' },
  { code: 'FR', name: 'France' },
  { code: 'IT', name: 'Italy' },
  { code: 'ES', name: 'Spain' },
  { code: 'AU', name: 'Australia' },
  { code: 'IN', name: 'India' },
  { code: 'JP', name: 'Japan' },
  { code: 'CN', name: 'China' },
];

//Generate the proper arrays fro the years, months, and days 
const years = Array.from({ length: 10 }, (_, i) => (2024 + i).toString());
const months = Array.from({ length: 12 }, (_, i) => (i + 1).toString().padStart(2, '0'));
const days = Array.from({ length: 31 }, (_, i) => (i + 1).toString().padStart(2, '0'));

export default function HolidaysSearchForm() {
  //State 
  const [country, setCountry] = useState('US');
  const [year, setYear] = useState('2025');
  const [month, setMonth] = useState('12');
  const [day, setDay] = useState('25');
  type Holiday = {
    name: string;
    location: string;
  };
  
  const [holidays, setHolidays] = useState<Holiday[]>([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const fetchHolidays = async () => {
    setLoading(true);
    setError(null);

    try {
      const res = await fetch(`/api/holidays?country=${country}&year=${year}&month=${month}&day=${day}`);
      const data = await res.json();

      if (data.error) {
        setError(data.error);
        setHolidays([]);
      } else {
        setHolidays(data);
      }
    } catch (err) {
      setError('Something went wrong');
    } finally {
      setLoading(false);
    }
  };

  //Note the styling here in tailwind was generated by GPT to create a beautiful form / color styling 
  return (
    <div className="p-4">
      <h1 className="text-2xl font-bold mb-4">ðŸŽ¯ Search for Holidays</h1>

      <form
        onSubmit={(e) => {
          e.preventDefault();
          fetchHolidays();
        }}
        className="space-y-4"
      >
        <div className="flex items-center space-x-2">
          <label className="font-medium w-24">Country:</label>
          <select
            value={country}
            onChange={(e) => setCountry(e.target.value)}
            className="border px-2 py-1 rounded w-full max-w-xs"
          >
            {countries.map((c) => (
              <option key={c.code} value={c.code}>
                {c.name}
              </option>
            ))}
          </select>
        </div>

        <div className="flex items-center space-x-2">
          <label className="font-medium w-24">Year:</label>
          <select
            value={year}
            onChange={(e) => setYear(e.target.value)}
            className="border px-2 py-1 rounded w-full max-w-xs"
          >
            {years.map((y) => (
              <option key={y} value={y}>
                {y}
              </option>
            ))}
          </select>
        </div>

        <div className="flex items-center space-x-2">
          <label className="font-medium w-24">Month:</label>
          <select
            value={month}
            onChange={(e) => setMonth(e.target.value)}
            className="border px-2 py-1 rounded w-full max-w-xs"
          >
            {months.map((m) => (
              <option key={m} value={m}>
                {m}
              </option>
            ))}
          </select>
        </div>

        <div className="flex items-center space-x-2">
          <label className="font-medium w-24">Day:</label>
          <select
            value={day}
            onChange={(e) => setDay(e.target.value)}
            className="border px-2 py-1 rounded w-full max-w-xs"
          >
            {days.map((d) => (
              <option key={d} value={d}>
                {d}
              </option>
            ))}
          </select>
        </div>

        <button
          type="submit"
          className="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded"
        >
          Get Holidays
        </button>
      </form>

      <div className="mt-6">
        {loading && <p className="text-gray-300">Loading...</p>}
        {error && <p className="text-red-500">Error: {error}</p>}

        {holidays.length > 0 ? (
          <ul className="list-disc pl-5 mt-4 text-white">
            {holidays.map((holiday, idx) => (
              <li key={idx}>
                <strong>{holiday.name}</strong> in {holiday.location}
              </li>
            ))}
          </ul>
        ) : (
          !loading &&
          !error && (
            <p className="mt-4 text-gray-300">No holidays listed for that date.</p>
          )
        )}
      </div>
    </div>
  );
}
